00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/21/2023 2:57:07 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Bitmap Subroutine
00000000                             3  * Written by : Zoe Wheatcroft
00000000                             4  * Date       : 6/1/2023
00000000                             5  * Description:
00000000                             6  
00000000                             7  * Renders bitmap from bottom up, using the top left as 0,0
00000000                             8  * Pure white is noted as transparent
00000000                             9  *-----------------------------------------------------------
00000000                            10  
00000000                            11  * Put program code here
00000000                            12  
00000000                            13  
00000000                            14  
00000000                            15  
00000000                            16  ; init
00000000                            17  * bit map details:
00000000                            18  * 0A - Starting address of bitmap image data (long)
00000000                            19  * 12 - bitmap width (long)
00000000                            20  * 16 - bitmap height (long)
00000000                            21  * 1C - bits per pixel, color depth
00000000                            22  
00000000                            23     
00000000                            24  * Display Chunk - displays a chunk of a bmp file, renders bottom up, (0,0) is top left
00000000                            25  * If it reads 00FFFFFF (pure white) it will write the pixel as transparent
00000000                            26  * parameters:
00000000                            27  * a1- pointer
00000000                            28  * 2- top left corner (x, y) you want to display 
00000000                            29  * 3- width of the chunk
00000000                            30  * 4- height of the chunk
00000000                            31  * 5- top left corner (x,y) on the output screen to display chunk
00000000                            32  * 6- 32 bit or 24 bit 
00000000                            33  displayChunk
Line 34 ERROR: Undefined symbol
00000000                            34      movem.l D_REGS,-(sp) ; put everything on the stack
00000000                            35      ;add.l   #32, sp
00000000  DFFC 00000024             36      add.l   #36, sp ; add an offset of the d regs + pc counter
00000006  3C17                      37      move.w  (sp),d6 ; bit color size
00000008  4285                      38      clr.l   d5
0000000A  2A2F 0004                 39      move.l  4(sp),d5 ; where to display chunk on screen
0000000E  282F 0008                 40      move.l  8(sp),d4 ; chunk height
00000012  262F 000C                 41      move.l  12(sp),d3 ; chunk width
00000016  242F 0010                 42      move.l  16(sp),d2 ; starting coordinate of chunk
0000001A  206F 0014                 43      move.l  20(sp),a0 ; pointer to chunk
0000001E                            44  
0000001E                            45      ; change chunk pointer to pixel data
0000001E  2E28 000A                 46      move.l  $A(a0),d7
00000022  2248                      47      move.l  a0, a1
00000024                            48      ; put pixel address in big endian 
00000024  4847                      49      swap    d7
00000026  E09F                      50      ror.l   #$08,d7 ; d7 = pixel data offset
00000028  D3C7                      51      adda.l  d7, a1
0000002A                            52      ; moving sp back
0000002A  9FFC 00000024             53      sub.l  #36, sp
00000030                            54      
00000030                            55      * set color flag
00000030                            56      ; put color size into little end
00000030  E05E                      57      ror.w   #$8, d6
00000032                            58      ; set d6 to be color flag
00000032                            59      ; 0 - 24 bit color
00000032                            60      ; 2 - 32 bit color
00000032  0C46 0020                 61      cmpi.w  #32, d6
00000036  6700 00C6                 62      beq     displayChunk32
0000003A  4246                      63      clr     d6
0000003C  1C3C 0003                 64      move.b  #3, d6 ; will later be used for multiplication based on byte size of color
00000040  6000 0008                 65      bra     aroundSetFlag32bit
00000044                            66  setFlag32bit
00000044  4246                      67      clr     d6
00000046  1C3C 0004                 68      move.b  #4, d6
0000004A                            69  aroundSetFlag32bit
0000004A                            70      
0000004A                            71      
0000004A                            72      * increase color pointer based on starting point
0000004A                            73      ; do the y increase
0000004A  4281                      74      clr.l   d1
0000004C  D242                      75      add.w   d2,d1 ; d1 = y start
0000004E  D244                      76      add.w   d4,d1
00000050  2E28 0016                 77      move.l  $16(a0),d7 ; d7 = bmp h
Line 78 ERROR: Undefined symbol
00000054  4EB9 004DBD16             78      jsr     littleToBigEnd
0000005A  9E81                      79      sub.l   d1, d7 ; d7 = bmp h - (y start + chunk h)
0000005C  2207                      80      move.l  d7, d1
0000005E                            81      
0000005E  2E28 0012                 82      move.l  $12(a0),d7 ; d7 = bmp w 
Line 83 ERROR: Undefined symbol
00000062  4EB9 004DBD16             83      jsr     littleToBigEnd
00000068  C346                      84      exg     d1, d6
Line 85 ERROR: Undefined symbol
0000006A  4EB9 004DBD16             85      jsr     multiply ; d7 = bmp w * y start
00000070  C346                      86      exg     d1, d6
Line 87 ERROR: Undefined symbol
00000072  4EB9 004DBD16             87      jsr multiply  ; d7 = bmp w * y start * 3|4
00000078  D3C7                      88      adda.l  d7, a1
0000007A                            89      
0000007A                            90      
0000007A                            91      
0000007A                            92      ; do the x increase
0000007A  4287                      93      clr.l     d7
0000007C  2C47                      94      move.l  d7, a6
0000007E  4842                      95      swap    d2 ; put x into lower word
00000080  3E02                      96      move.w  d2, d7 ; d7 = chunk start x  
Line 97 ERROR: Undefined symbol
00000082  4EB9 004DBD16             97      jsr     multiply
00000088  D3C7                      98      adda.l  d7, a1
0000008A                            99      ;PICK UP HERE, FINISH X AND Y INCREASE AND MULTIPLY FUNC
0000008A                           100      
0000008A                           101      ; break d5 into x and y register
0000008A  3405                     102      move.w  d5, d2
0000008C  D484                     103      add.l   d4, d2
0000008E  4845                     104      swap    d5
00000090  3205                     105      move.w  d5, d1 ; d5 will hold the x reset value
00000092  4845                     106      swap    d5
00000094  3A01                     107      move.w  d1, d5
00000096  5383                     108      subi.l  #1, d3 ; compensate for dbra
00000098  5384                     109      subi.l  #1, d4
0000009A                           110      
0000009A                           111  displayChunkRow
0000009A                           112     ; move.w  d1, d5 ; temp store d1 in d4 so d1 can be used for color
0000009A                           113      * set the pen color
0000009A                           114      ; select processing based on color size and index
0000009A  0C06 0004                115      cmpi.b  #4, d6
0000009E  6700 0016                116      beq     get32bColor
000000A2                           117      
000000A2                           118  get24bColor
000000A2  1219                     119      move.b  (a1)+,d1
000000A4  E149                     120      lsl.w   #$8, d1
000000A6  1219                     121      move.b  (a1)+,d1
000000A8  E189                     122      lsl.l   #$8, d1
000000AA  1219                     123      move.b  (a1)+,d1
000000AC                           124      
000000AC  0281 00FFFFFF            125      andi.l  #$00FFFFFF, d1
000000B2  6000 0010                126      bra     setPenColor
000000B6                           127  get32bColor
000000B6  2219                     128      move.l  (a1)+,d1
000000B8  E089                     129      lsr.l   #$8, d1
000000BA  0C81 00FFFFFF            130      cmpi.l  #$00FFFFFF, d1
000000C0  6700 0010                131      beq     increaseChunkRow ; skip the draw if alpha
000000C4                           132  
000000C4                           133  setPenColor
Line 134 ERROR: Undefined symbol
000000C4  103C 0016                134      move.b  #SET_PEN_COLOR, d0
000000C8  4E4F                     135      trap    #15
000000CA                           136  
000000CA                           137      ; d5 = x y pos
000000CA                           138      ; d3 = num x loops
000000CA                           139      ; d4 = num y loops
000000CA  3205                     140      move.w  d5, d1 ; undo temp storage
Line 141 ERROR: Undefined symbol
000000CC  103C 0016                141      move.b  #DRAW_PIXEL, d0
000000D0  4E4F                     142      trap    #15
000000D2                           143      ; drew pixel
000000D2                           144  increaseChunkRow
000000D2                           145      ; increment x 
000000D2  5245                     146      addi.w  #1, d5
000000D4  51CB FFC4                147      dbra    d3, displayChunkRow
000000D8                           148      
000000D8                           149      ; done with row, reset row vars and increment y stuff
000000D8  5342                     150      subi.w  #1, d2 ; increase y pos
000000DA  4845                     151      swap    d5
000000DC  3205                     152      move.w  d5, d1 ; reset x pos
000000DE  4845                     153      swap    d5
000000E0  3A01                     154      move.w  d1, d5
000000E2  262F 0030                155      move.l  48(sp),d3 ; reset x loops to chunk width
000000E6                           156      ; increase color pointer by bmp width - chunk width
000000E6  2E28 0012                157      move.l  $12(a0),d7 ; d7 = bmp width
Line 158 ERROR: Undefined symbol
000000EA  4EB9 004DBD16            158      jsr     littleToBigEnd
000000F0  9E83                     159      sub.l   d3, d7 ; d7 = bmp width - chunk width
000000F2  CEC6                     160      mulu.w  d6, d7 ; d7 = d7 * color byte size
000000F4  D3C7                     161      adda.l  d7, a1
000000F6                           162      
000000F6  5383                     163      subi.l  #1, d3 ; compensate for dbra offset
000000F8  51CC FFA0                164      dbra    d4, displayChunkRow
000000FC                           165      
Line 166 ERROR: Undefined symbol
000000FC                           166      movem.l (sp)+,D_REGS
000000FC  4E75                     167      rts
000000FE                           168  
000000FE                           169  displayChunk32
000000FE                           170  
000000FE  4246                     171      clr     d6
00000100  1C3C 0004                172      move.b  #4, d6
00000104                           173      
00000104                           174      * increase color pointer based on starting point
00000104                           175      ; do the y increase
00000104  4281                     176      clr.l   d1
00000106  D242                     177      add.w   d2,d1 ; d1 = y start
00000108  D244                     178      add.w   d4,d1
0000010A  2E28 0016                179      move.l  $16(a0),d7 ; d7 = bmp h
Line 180 ERROR: Undefined symbol
0000010E  4EB9 004DBD16            180      jsr     littleToBigEnd
00000114  9E81                     181      sub.l   d1, d7 ; d7 = bmp h - (y start + chunk h)
00000116  2207                     182      move.l  d7, d1
00000118                           183      
00000118  2E28 0012                184      move.l  $12(a0),d7 ; d7 = bmp w 
Line 185 ERROR: Undefined symbol
0000011C  4EB9 004DBD16            185      jsr     littleToBigEnd
00000122  C346                     186      exg     d1, d6
Line 187 ERROR: Undefined symbol
00000124  4EB9 004DBD16            187      jsr     multiply ; d7 = bmp w * y start
0000012A  C346                     188      exg     d1, d6
Line 189 ERROR: Undefined symbol
0000012C  4EB9 004DBD16            189      jsr multiply  ; d7 = bmp w * y start * 3|4
00000132  D3C7                     190      adda.l  d7, a1
00000134                           191      
00000134                           192      ; do the x increase
00000134  4287                     193      clr.l     d7
00000136  2C47                     194      move.l  d7, a6
00000138  4842                     195      swap    d2 ; put x into lower word
0000013A  3E02                     196      move.w  d2, d7 ; d7 = chunk start x  
Line 197 ERROR: Undefined symbol
0000013C  4EB9 004DBD16            197      jsr     multiply
00000142  D3C7                     198      adda.l  d7, a1
00000144                           199      ;PICK UP HERE, FINISH X AND Y INCREASE AND MULTIPLY FUNC
00000144                           200      
00000144                           201      ; break d5 into x and y register
00000144  3405                     202      move.w  d5, d2
00000146  D484                     203      add.l   d4, d2
00000148  4845                     204      swap    d5
0000014A  3205                     205      move.w  d5, d1 ; d5 will hold the x reset value
0000014C  4845                     206      swap    d5
0000014E  3A01                     207      move.w  d1, d5
00000150  5383                     208      subi.l  #1, d3 ; compensate for dbra
00000152  5384                     209      subi.l  #1, d4
00000154  2C3C 00FFFFFF            210      move.l  #$00ffffff, d6
0000015A  3E3C 0001                211      move.w  #1,d7
0000015E                           212  displayChunkRow32
0000015E  2219                     213      move.l  (a1)+,d1
00000160  E089                     214      lsr.l   #$8, d1
00000162  B246                     215      cmp.w  d6, d1 ; check if the color is pure white
00000164  6700 0010                216      beq     increaseChunkRow32 ; skip the draw if alpha
00000168                           217  
Line 218 ERROR: Undefined symbol
00000168  103C 0016                218      move.b  #SET_PEN_COLOR, d0
0000016C  4E4F                     219      trap    #15
0000016E                           220  
0000016E                           221      ; d5 = x y pos
0000016E                           222      ; d3 = num x loops
0000016E                           223      ; d4 = num y loops
0000016E  3205                     224      move.w  d5, d1 ; undo temp storage
Line 225 ERROR: Undefined symbol
00000170  103C 0016                225      move.b  #DRAW_PIXEL, d0
00000174  4E4F                     226      trap    #15
00000176                           227      ; drew pixel
00000176                           228  increaseChunkRow32
00000176                           229      ; increment x 
00000176  DA47                     230      add.w   d7, d5
00000178  51CB FFE4                231      dbra    d3, displayChunkRow32
0000017C                           232      
0000017C                           233      ; done with row, reset row vars and increment y stuff
0000017C  5342                     234      subi.w  #1, d2 ; increase y pos
0000017E  4845                     235      swap    d5
00000180  3205                     236      move.w  d5, d1 ; reset x pos
00000182  4845                     237      swap    d5
00000184  3A01                     238      move.w  d1, d5
00000186  262F 0030                239      move.l  48(sp),d3 ; reset x loops to chunk width
0000018A                           240      ; increase color pointer by bmp width - chunk width
0000018A  2E28 0012                241      move.l  $12(a0),d7 ; d7 = bmp width
Line 242 ERROR: Undefined symbol
0000018E  4EB9 004DBD16            242      jsr     littleToBigEnd
00000194  9E83                     243      sub.l   d3, d7 ; d7 = bmp width - chunk width
00000196  CEFC 0004                244      mulu.w  #4, d7 ; d7 = d7 * color byte size
0000019A  D3C7                     245      adda.l  d7, a1
0000019C                           246      
0000019C  5383                     247      subi.l  #1, d3 ; compensate for dbra offset
0000019E  3E3C 0001                248      move.w  #1, d7
000001A2  51CC FFBA                249      dbra    d4, displayChunkRow32
000001A6                           250      
Line 251 ERROR: Undefined symbol
000001A6                           251      movem.l (sp)+,D_REGS
000001A6  4E75                     252      rts
000001A8                           253  
000001A8                           254  
000001A8                           255  
000001A8                           256  
000001A8                           257  
000001A8                           258  
000001A8                           259  
000001A8                           260  
000001A8                           261  
000001A8                           262  
000001A8                           263  
000001A8                           264  
000001A8                           265  
000001A8                           266  
000001A8                           267  
000001A8                           268  
000001A8                           269  
000001A8                           270  
000001A8                           271  
000001A8                           272  
000001A8                           273  
Line 274 WARNING: END directive missing, starting address not set

19 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AROUNDSETFLAG32BIT  4A
DISPLAYCHUNK        0
DISPLAYCHUNK32      FE
DISPLAYCHUNKROW     9A
DISPLAYCHUNKROW32   15E
GET24BCOLOR         A2
GET32BCOLOR         B6
INCREASECHUNKROW    D2
INCREASECHUNKROW32  176
SETFLAG32BIT        44
SETPENCOLOR         C4
